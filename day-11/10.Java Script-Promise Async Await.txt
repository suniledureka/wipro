Synchronous Vs Asynchronous
===========================
-> Synchronous means the code runs in a particular sequence of instructions given in the program.
-> Each instruction waits for the previous instruction to complete its execution.
-> Synchronous basically means that you can only execute one thing at a time
-> Due to synchronous programming, sometimes important instructions get blocked due to some previous instructions, which causes a delay in the UI.

synchronous.java

function first(){
    console.log('function - 1')
}

let second = () =>{ 
    console.log('function - 2')
    for(let i=1; i<=1000000; i++){
        console.log(`${i}`)
    }
}

let third = function(){
    console.log('function - 3')
}

first();
second();
third();


--- index.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>synchronous</title>
</head>
<body>
    <script src="synchronous.js"></script>
</body>
</html>



-> Asynchronous code execution allows to execute next instructions immediately and doesn't block the flow
-> Asynchronous means that you can execute multiple things at a time and you don't have to finish executing the current thing in order to move on to next one

asynchronous.js

function first(){
    console.log('function - 1')
}

let second = () =>{ 
    setTimeout(() => {
            console.log('function - 2')
            for(let i=1; i<=1000000; i++){
                console.log(`${i}`)
            }
        }, 0);
}

let third = function(){
    console.log('function - 3')
}

first();
second();
third();

---- index.html -----

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>asynchronous</title>
</head>
<body>
    <script src="asynchronous.js"></script>
</body>
</html>


================================

Promises in Java Script
-----------------------
Promises are used in asynchronous programming

Promises in JavaScript are objects that represent the eventual result of an asynchronous operation

A promise is created using the Promise constructor, which takes a function with two arguments: resolve and reject. Inside this function, the asynchronous operation is performed. If the operation succeeds, resolve is called with the result; if it fails, reject is called with the error.

A promise can be in one of three states:

1. Pending: - the initial state, representing that the asynchronous operation is still in progress.
2. Fulfilled: - the operation completed successfully, and the promise now holds the resulting value.
3. Rejected: - the operation failed, and the promise holds a reason for the failure (usually an error).

step -1 initialize a Promise
step -2 consume a promise

promise.then() will be triggered when a promise is fulfilled (resolved)

fetch API - used to retrieve and send data asynchronously


Normal Approach

<script>
    let downloadImage = (resolve, reject)=>{
        //download Image task
        let isDownloaded = false
        if(isDownloaded){
            resolve('Image Downloaded Successfully')
        }
        else{
            reject('Image cannot be downloaded')
        }
    }

    //function call
    downloadImage((message)=>{
        console.log('Yes - '+message)
    },
    (errMsg)=>{
        console.log('No - '+errMsg)
    })
</script>


JavaScript Promise Object - contains both the producing code and calls to the consuming code

Promise Syntax

let myPromise = new Promise(function(myResolve, myReject) {
  // "Producing Code" (May take some time)

  myResolve(); // when successful
  myReject();  // when error
});

// "Consuming Code" (Must wait for a fulfilled Promise)
myPromise.then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);

When the producing code obtains the result, it should call one of the two callbacks: 

When	Success   Call   myResolve(result value)
When    Error	  Call   myReject(error object)

Promise Object Properties

A JavaScript Promise object can be:

    Pending
    Fulfilled
    Rejected

The Promise object supports two properties: state and result.

While a Promise object is "pending" (working), the result is undefined.

When a Promise object is "fulfilled", the result is a value.

When a Promise object is "rejected", the result is an error object.



Promise.then() takes two arguments, a callback for success and another for failure.

Both are optional, so you can add a callback for success or failure only.



Promises are used to handle asynchronous operations in JavaScript. They are easy to manage when dealing with multiple asynchronous operations

The Promise constructor takes a function (an executor) that will be executed immediately and passes in two functions: resolve- which must be called when the Promise is resolved (passing a result), and 
reject - when it is rejected (passing an error).

Fulfilled - Fulfilled is a state of a Promise. It means that the promise has been resolved and now has its resolved value (using the internal resolve function). The operation represented by the promise has been completed successfully.


Rejected - means that the promise has been rejected and now has its rejected reason (using the internal reject function). The operation represented by the promise failed to obtain a value and thus has a reason for failing to do so (typically an error code or error object, but it can be anything).

Pending -  is the initial promise state. The operation represented by the promise has not yet been fulfilled or rejected.

========================================================
fetch
-----
JavaScript can send network requests to the server and load new information whenever it's needed.

For example, we can use a network request to:
    Submit an order,
    Load user information,
    Receive latest updates from the server,
    …etc.

let promise = fetch(url, [options])

    url – the URL to access.
    options – optional parameters: method, headers etc.

let response = await fetch(url);

if (response.ok) { // if HTTP-status is 200-299
  // get the response body (the method explained below)
  let json = await response.json();
} else {
  alert("HTTP-Error: " + response.status);
}


POST Request using fetch()
==========================
fetch("https://jsonplaceholder.typicode.com/posts", {
    
    // Adding method type
    method: "POST",
    
    // Adding body or contents to send
    body: JSON.stringify({
        id: "1006",
  	name: "Angular Made Easy",
 	price: "175",
	in_stock:false
    }),
    
    // Adding headers to the request
    headers: {
        "Content-type": "application/json; charset=UTF-8"
    }
})

// Converting to JSON
.then(response => response.json())

// Displaying results to console
.then(json => console.log(json));


Handling Errors with fetch()

fetch(url)
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    // Handle successful response
  })
  .catch(error => {
    console.error('Fetch error:', error);
  });



========================================================
ES7 Async Await Concept in JavaScript
-------------------------------------
comes under Asynchronous Programming in JS

The keyword "async" before a function makes the function return a promise

The "await" keyword can only be used inside an async function.

The await keyword makes the function pause the execution and wait for a resolved promise before it continues:

comes under Asynchronous Programming in JS


-cleaner way of dealing with promises
(Using async-await with fetch results in a much cleaner code than using multiple .then(s))

The await operator is used to wait for a Promise. It can be used inside an Async block only. The keyword Await makes JavaScript wait until the promise returns a result. It has to be noted that it only makes the async function block wait and not the whole program execution.

"await" works only inside async functions

<script>
async function init(){
   await createAccount({ acno: 103, name: 'Sandhya', bal: 55000 })
   displayAccounts();
}

init()
</script>


Example
async function myFunction() {
  return "Hello";
}

Is the same as:
function myFunction() {
  return Promise.resolve("Hello");
}


Async/await
-cleaner way of dealing with promises
(Using async-await with fetch results in a much cleaner code than using multiple .then(s))

The await operator is used to wait for a Promise. It can be used inside an Async block only. The keyword Await makes JavaScript wait until the promise returns a result. It has to be noted that it only makes the async function block wait and not the whole program execution.

"await" works only inside async functions

<script>
async function init(){
   await createAccount({ acno: 103, name: 'Sandhya', bal: 55000 })
   displayAccounts();
}

init()
</script>

Example:

<script>
    async function getUsers() {
        const response = await fetch('https://api.github.com/users'); //await will wait until the fetch promise is fulfilled
        //console.log(response)
        const users = await response.json();
        //console.log(users)
        for (let user of users) {
            let { id, login, type } = user;
            console.log(`ID: ${id} | Name: ${login} | Type: ${type}`)
        }
    }

    getUsers();
</script>





