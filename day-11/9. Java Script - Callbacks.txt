Callback 
========

-> A callback is a function passed as an argument to another function.
-> A callback allow a function to call another function
-> A call back function can run after another function has finished.
-> A JavaScript callback is a function which is to be executed after another function has finished execution.
A more formal definition would be - Any function that is passed as an argument to another function so that it can be executed in that other function is called as a callback function.

   <script>
     setTimeout(() => {
		 alert('callback function');
	 }, 1000);
   </script>

setTimeout() is an asynchronous function, meaning that the timer function will not pause execution of other functions in the functions stack


-- callback.js ---
function first(){
    console.log('function - 1')
}

let second = (callback) =>{ 
    setTimeout(() => {
            console.log('function - 2')
            for(let i=1; i<=1000000; i++){
                console.log(`${i}`)
            }

            callback(); //calling third()
        }, 5000);
}

let third = function(){
    console.log('function - 3')
}

first();
second(third);


--- callbacks.html ---
<body>
    <nav>
        <h2>Callback in Java Script</h2>
    </nav>   

    <script src="callbacks.js"></script>



 
callback.js

/*
1.Passing 10 as the initial value to Step1
2.If there is no error, then passing the result to Step2
3.If there is no error again, then passing the result to Step3
4.Finally, printing the result.
*/

function step1(value, callback) {	
  callback(value + 10, false);
}

function step2(value, callback) {
  callback(value + 10, false);
}

function step3(value, callback) {
  callback(value + 10, false);
}


step1(10, function(result1, error) {
   if (!error) {
     step2(result1, function(result2, error) {
	if (!error) {
	   step3(result2, function(result3, error) {
	     if (!error) {
		console.log('Result= ' + result3);
	     }
	   });
	}
      });
  }
});




A callback is a function passed as an argument to another function.

Callback Hell : Nested callbacks stacked below one another forming a pyramid structure. (Pyramid of Doom). This style of programming becomes difficult to understand & manage

Callback Hell Solutions - 1 Split Callbacks into Smaller functions

step1(10, function(result1, error){
  if(!error)
    return result1;
});

function step1(value, callback){
  let result1 = callback(value + 10, false);
  step2(result1, function(result2, error){
     if(!error)
       return result2;
   });
}

function step2(value, callback){
  let result2 = callback(value + 10, false);
  step3(result2, function(result3, error){
     if(!error)
       return result3;
  });
}


function step3(value, callback){
 let result3 = callback(value + 10, false);
 console.log(result3);
}
================================================================



Example - 1
    <nav>
        <h2>Java Script | Callbacks</h2>
    </nav>
    <script>
        let sum = (a,b)=>{
            return a+b
        }

        let diff = (a,b)=>{
            return a-b
        }


        let calculate = function(x,y,callback){            
           let result = callback(x,y)
           return result
        }
    </script>
    <script>
        let output;
        output = calculate(4,3,sum)
        console.log(output)

        output = calculate(7,2,diff)
        console.log(output)

        output = calculate(5,4, (a,b)=>{
            return a*b
        })
        console.log(output)        
    </script>

Realtime Use of Callback Functions


<body>
    <table border=1 width=60%>
        <thead>
            <tr>
                <th>EMP ID</th>
                <th>NAME</th>
                <th>AGE</th>
            </tr>
        </thead>
        <tbody id="table-body">

        </tbody>
    </table>
    <script>
        let employees = [
            { id: 101, name: 'Sunil', age: 38 },
            { id: 102, name: 'Harsha', age: 35 }
        ]

        let createEmployee = (employee) =>{
            setTimeout(()=>{
                employees.push(employee)
            },2000)
        }

        let getEmployees = () => {
            setTimeout(()=>{
                let employeeRows = ''
                employees.forEach((employee)=>{
                    employeeRows+=`<tr>
                    <td>${employee.id}</td>
                    <td>${employee.name}</td>
                    <td>${employee.age}</td>
                    `
                })

                document.querySelector('#table-body').innerHTML = employeeRows
            },1000)
        }

        
        createEmployee({id:103,name:'Sanjay',age:23})

        getEmployees()
        
    </script>

--------------------------------------
<script>
        let employees = [
            { id: 101, name: 'Sunil', age: 38 },
            { id: 102, name: 'Harsha', age: 35 }
        ]

        let createEmployee = (employee, callback) =>{
            setTimeout(()=>{
                employees.push(employee);
                callback()
            },2000)
        }

        let getEmployees = () => {
            setTimeout(()=>{
                let employeeRows = ''
                employees.forEach((employee)=>{
                    employeeRows+=`<tr>
                    <td>${employee.id}</td>
                    <td>${employee.name}</td>
                    <td>${employee.age}</td>
                    `
                })

                document.querySelector('#table-body').innerHTML = employeeRows
            },1000)
        }

        
        createEmployee({id:103,name:'Sanjay',age:23}, getEmployees)        
        
    </script>

-------------------------------

