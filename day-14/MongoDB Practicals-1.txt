google - "fake rest apis"

https://jsonplaceholder.typicode.com/todos   -   todos

** Finding Documents ==== fetch document

db.<collection>.find(query, projection, options)

query - specifies selection filter using query operators
projection: specifies the fields to return in the documents that match the query filter
options - specifies additional options for the query - these options modify the query behaviour and how results are returned

db.todos.find()
db.todos.find({})
db.todos.find({completed: true})
db.todos.find({completed: true, userId: 1})
db.todos.find({completed: true}, {id: 1, todo: 1, completed: 1})
db.todos.find({completed: true}, ["id", "todo"])
db.todos.findOne({completed: false})


** Nested Documents

** Operators & Complex Queries
query operators in mongodb are denoted by a $ sign  - $gt, $lt, $lte, $gte, $eq, $and,   $exists, $all, $or etc

db.employees.find({salary: 2000})
db.employees.find({salary: {$gt: 2000}})
db.employees.find({salary: {$lt: 2000}})
db.employees.find({salary: {$lt: 2000}})
db.employees.find({salary: {$lt: 2000}, ename: 'xxxx'})

db.employees.find({$or: [{salary: 2000}, {ename:'Valerie'}]})
db.employees.find({$or: [{salary: {$gte: 2000}}, {salary: {$lt: 3000}}]})
db.employees.find({$and: [{salary: {$gte: 2000}}, {salary: {$lt: 3000}}]})


** using $in & $nin
get me all the employee whose salary is 2000, 2500, 3000

db.employees.find({$or: [{salary: 2000}, {salary: 2500}, {salary: 3000}]})
db.employees.find({salary: {$in: [2000, 2500, 3000]}}) -- simpler
db.employees.find({salary: {$nin: [2000, 2500, 3000]}})

** Querying Arrays

db.employees.find({courses: "Java"})
db.employees.find({courses: ["Java"]})   --- exact match
db.employees.find({courses: ["Java", "React"]}) --- exact match
db.employees.find({courses: {$all: ["React", "Java"]}})


** Export Collection

** Deleting Documents
db.employees.find()
db.employees.deleteOne({_id: ObjectId("sshsh76677")})
db.employees.find()
db.employees.deleteMany({salary: 3000})
db.employees.deleteMany({})

** Updating Documents

updateOne()  / updateMany()   $set

db.employees.find()
db.employees.updateOne({_id: ObjectId('6834a24141d7c58b506c4bd5')}, {$set: {ename: "Christopher", salary: 8888}})    -- updating one document

db.employees.updateOne({empno: 115}, {$set: {ename: "Christopher", salary: 8888, address: 'Hyderabad'}}, {upsert: true})

"upsert" operation is a combination of an update and an insert operation. It allows us to update an existing document if it matches a specified query or insert a new document if no such document exists. The term "upsert" is a mix of "update" and "insert."

db.employees.find()
db.employees.updateMany({ ename: 'Christophe' }, { $set: { ename: 'CHRISTOPHER' } } )



==> $inc operator
db.employees.updateOne({_id: ObjectId('6834a24141d7c58b506c4bd5')}, {$inc: {salary: 100}})
db.employees.updateOne({_id: ObjectId('6834a24141d7c58b506c4bd5')}, {$inc: {salary: -100}})


** push and pull   -- for array type field

db.employees.updateOne({_id: "xxxx"}, {$pull: {genres: "fantasy"}})  ---- "fantasy" value in the array will be taken out
db.employees.updateOne({_id: "xxxx"}, {$push: {genres: "fantasy"}})  --- pushing a new item to array

--- to push several items to genres 
db.employees.updateOne({_id: "xxxx"}, {$push: {genres: {$each: ["fantasy", "drama"]}})


============= DATA MODELLING in MongoDB ===================

--> https://www.geeksforgeeks.org/mongodb-data-modelling/
--> https://www.mongodb.com/docs/manual/data-modeling/

Data modeling in MongoDB is the process of designing and creating the structure of collections and documents that will be stored in the database. Maintaining data in an organized manner is very important for database efficiency. It also ensures data security, data accuracy, and better functioning. To maintain an organized database, it is important to learn data modeling.
MongoDB Data modeling is the process of arranging unstructured data from a real-world event into a logical data model in a database.

MongoDB Data Model Designs::
For modeling data in MongoDB, two strategies are available. These strategies are different and it is recommended to analyze scenario for a better flow.

The two methods for data model design in MongoDB are:
1) Embedded Data Model		2) Normalized Data Model

Data modeling refers to the organization of data within a database and the links between related entities. 
Data in MongoDB has a flexible schema model, which means:
--> Documents within a single collection are not required to have the same set of fields.
--> A field's data type can differ between documents within a collection.


*** Indexing in MongoDB ::

https://www.geeksforgeeks.org/indexing-in-mongodb/?ref=ml_lbp

Indexing in MongoDB is a crucial feature that enhances query processing efficiency. 
Indexes are used to increase the speed of retrieval of data when we have large chunks of documents in a collection
ex: book index?
Without indexing, MongoDB must scan every document in a collection to retrieve the matching documents and leading to slower query performance. 

- by default - every collection will have an Index on "_Id" key		-- check in MondoDB Compass

> db.employees.getIndexes()
> db.employees.getIndexes().forEach(function(ind){print(ind)})
> db.employees.getIndexes().forEach(function(ind){print(ind.name)})

db.COLLECTION_NAME.createIndex({KEY:1}) 

> db.employees.createIndex({"name": 1})  //ascending
> db.employees.ensureIndex({"empId": -1}) //descending

> db.employees.dropIndex('name_1')



===== Aggregation Framework in MongoDB ==========

The MongoDB Aggregation Framework is a powerful tool for processing and transforming data within the database, enabling complex data analysis and reporting tasks without relying on extensive client-side processing. 

It works by processing data through a pipeline of stages, each performing a specific operation on the documents. 

This framework allows for grouping, filtering, sorting, reshaping, and performing calculations on data

Aggregation in MongoDB is like a super powered filter, a framework to run complex manipulations, processing and calculations in MongoDB.

It provides pipeline for data processing
S1 ----> S2 ----> S3 ---> S4
Result one stage will be the input to the next stage

Aggregate is very similar to the find() method, where you can provide a criteria for your query in the form of JSON documents

The key element in aggregate is called the pipeline
It also helps us in performing few operations like min, max, sum etc

Aggregation Pipeline: A sequence of stages that process documents

Stages: Individual operations within the pipeline that filter, group, sort, or reshape data
Pipeline Stages Examples: ` $match` (filters documents), $group (groups documents based on a key), $sort (sorts documents), $project (selects or modifies fields), etc

How it Works:
Documents are passed through the aggregation pipeline, with each stage acting on the output of the previous stage. The pipeline can consist of multiple stages, and the order of these stages is important. Each stage performs a specific operation on the documents, and the output of the final stage is the result of the aggregation


the command to use aggregation is
> db.<collection>.aggregate(pipeline, options)

What is pipeline?
 - A sequence of data aggregation operations or stages
 - pipeline is an array

What are options?
 - documents can be passed as well

Which are the valid Aggregate stages?
1. $count
2. $group - this aggregation stage groups documents by the unique _id expression provided; Don't confuse this _id expression with the _id ObjectId provided to each document. 
3. $limit
4. $lookup
5. $match   - this aggregation stage behaves like a find. It will filter documents that match the query provided; can improve performance since it limits the number of documents the next stages must process
6. $merge
7. $sort
8. $project - this aggregation stage passes only the specified fields along to the next aggregation stage, This is the same projection that is used with the find() method. 

9. $unwind
10. $unset
11. $skip
and many more


>  db.employees.aggregate([{$sort: {'salary': 1}}]
db.employees.aggregate([{$sort: {salary: 1}}]


var pipeline = [
 {$sort: {"salary": 1}}
]

> db.employees.aggregate(pipeline)

add one more stage:

var pipeline = [
 {$sort: {"salary": 1}}.
 {$limit: 3} 
]

> db.employees.aggregate([{ $sort: { 'salary': 1 } }, {$limit: 3}] )

> db.employees.aggregate([{$group: {"_id": 'dept'}}, { $sort: { 'salary': 1 } }, {$limit: 3}] )


--- used for optimizing the query


db.posts.aggregate([
  // Stage 1: Only find documents that have more than 1 like
  {
    $match: { likes: { $gt: 1 } }
  },
  // Stage 2: Group documents by category and sum each categories likes
  {
    $group: { _id: "$category", totalLikes: { $sum: "$likes" } }
  }
])


db.restaurants.aggregate([
  {
    $project: {
      "name": 1,
      "cuisine": 1,
      "address": 1
    }
  },
  {
    $limit: 5
  }
])


Usecase:
Imagine you want to calculate the average price of products in different categories. 
You could use an aggregation pipeline with the following stages:
1. $match: Filter documents to include only products
2. $group: Group documents by category and calculate the sum of prices and the count of products
3. $project: Calculate the average price by dividing the sum of prices by the count of products. 
4. $sort: Sort the results by category

To calculate the average price in MongoDB using aggregation, you can use the $group stage with $sum and $avg or $count. The $sum operator calculates the total price, and $count calculates the total number of products. Then, you can divide the sum of prices by the count of products to get the average


db.products.aggregate([
  {
    $group: {
      _id: null, // Group all documents into a single group
      totalPrice: { $sum: "$price" } // Calculate the sum of the "price" field
    }
  }
])


db.products.aggregate([
  {
    $count: "totalProducts" // Calculate the total number of products
  }
])

db.products.aggregate([
  {
    $group: {
      _id: null,
      totalPrice: { $sum: "$price" },
      totalProducts: { $count: {} } // Use $count to count documents
    }
  },
  {
    $project: { // Project a new field for the average price
      _id: 0, // Hide the default _id field
      averagePrice: { $divide: ["$totalPrice", "$totalProducts"] }
    }
  }
])


$group: This stage groups all documents into a single group (identified by _id: null). It calculates the sum of the price field using $sum and the count of documents using $count.
$sum: This operator calculates the sum of the price field across all documents in the group. 
$count: This operator counts the number of documents that are passed through the pipeline. 
$project: This stage projects a new field called averagePrice, which is calculated by dividing the totalPrice by the totalProducts.
$divide: This operator divides the totalPrice by totalProducts to calculate the average.




==== MongoDB Atlas ======

MongoDB Atlas is an integrated suite of data services centered around a cloud database designed to accelerate and simplify how you build with data. Build faster and build smarter with a developer data platform that helps solve your data challenges.

MongoDB Atlas on AWS: Migrating from a self-managed environment to the AWS Cloud

What is MongoDB Atlas?

Database-as-a-Service (DBaaS) is a service that allows you to set up, deploy, and scale a database without worrying about on-premise physical hardware, software updates, and the details of configuring for performance. With DBaaS, a cloud provider does all that for you—and gets you up and running right away.

MongoDB Atlas is a fully-managed cloud database that handles all the complexity of deploying, managing, and healing your deployments on the cloud service provider of your choice (AWS , Azure, and GCP). MongoDB Atlas is the best way to deploy, run, and scale MongoDB in the cloud. With Atlas, you’ll have a MongoDB database running with just a few clicks, and in just a few minutes.

https://www.mongodb.com/resources/products/platform/mongodb-atlas-tutorial





