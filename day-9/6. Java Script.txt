JavaScript Date Object
======================
- used to work with date and time.



There are four ways of instantiating a Date:

1) default constructor
let today = new Date(); 
- creates a Date object of current date and time


2) using timestamp
- timestamp is the number of milliseconds since 1970 Jan Ist 
<script>
 let timestamp = 3660000
 let today = new Date(timestamp)
 console.log(today)
</script>

if we pass 0, we  will get a Date object that represents the time at Jan 1st 1970 
let today = new Date(0);
console.log(today);


3) using Date components
let d = new Date(year, month, date, hours, minutes, seconds, milliseconds); 

In Java Script Date object, the month is ranging from 0 to 11 and day of the week is ranging from 0 to 6

let date1 = new Date(2021, 9, 29, 11, 22, 13, 0)
let date2 = new Date(2021, 9, 20)
console.log(date1)
console.log(date2)  

4) using Date string
Date(string); - here the Date object uses the parse() method to determine which date you are passing

let date1 = new Date('2020-1-25')
let date2 = new Date('2020-01')
let date3 = new Date('2020')
let date4 = new Date('01/25/2020')



new Date('2018/07/22')
new Date('2018/7/22')
new Date('July 22, 2018')
new Date('July 22, 2018 07:22:13')
new Date('2018-07-22 07:22:13')
new Date('25 March 2018')
new Date('25 Mar 2018')
new Date('25 March, 2018')
new Date('March 25, 2018')
new Date('March 25 2018')
new Date('2018 March') //Mar 1st 2018, 00:00:00


JavaScript Date Methods
-----------------------
1) getFullYear() - returns the year (four digits)
2) getMonth() - returns the month (from 0-11)
3) getDate()
4) getDay()-returns the day of the week(from 0-6 )
5) getHours() 
6) getMinutes() 
7) getSeconds() 
8) getMilliseconds() 

9) setDate(date) 
10) setFullYear(year) 
11) setHours(hours)
12) setMinutes(minutes);
13) setSeconds(seconds)
14) setMilliseconds(milliseconds)
15) setMonth(month[0-11])
16) setTime(time) -sets a date to a specified number of milliseconds after January 1, 1970

let now = new Date();
now.setFullYear(2049);
now.setHours(0);
now.setMinutes(22);
now.setSeconds(3);
console.log(now);

17) getTime() - returns the number of milliseconds since Jan 1, 1970


Human Readable Strings
----------------------
<script>
let now = new Date();
console.log(now.toDateString()); 
console.log(now.toTimeString()); 

console.log(now.toLocaleDateString()); - M/d/YYYY
console.log(now.toLocaleTimeString()); 
console.log(now.toLocaleString()); 
</script>

To get the time of different places of the world
------------------------------
Pacific Daylight Time	Los Angeles
Central Daylight Time	Chicago
Eastern Daylight Time	New_York

<script>
let today = new Date();
console.log(today.toLocaleTimeString())

toLocaleTimeString(locale, options)

//India Time - IST
console.log(today.toLocaleTimeString('en-US',{timeZone:'Asia/Calcutta'})

//New York (USA) time
console.log(today.toLocaleTimeString('en-US',{timeZone:'america/new_york'}))
America/Chicago
America/Los_Angeles

date.toLocaleTimeString('ar-EG')  //Arabic in most Arabic speaking countries uses real Arabic digits

//Berlin (Germany) time
console.log(today.toLocaleTimeString('de-DE',{timeZone:'Europe/Berlin'}))

//London (UK) time
console.log(today.toLocaleTimeString('en-GB',{timeZone:'Europe/London'}))

//Sydney (Australia) time
console.log(today.toLocaleTimeString('en-AU', {timeZone:'Australia/sydney'})

http://www.lingoes.net/en/translator/langcode.htm  -to get Locales

------------------------------------
//to display hours and minutes with AM/PM
console.log(d.toLocaleString('en-US',{hour:'numeric', minute:'numeric', timeZone:'Europe/london',hour12:true}))

hour: '2-digit', minute: '2-digit'

let today = new Date()
console.log(today.toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit',timeZone:'Europe/Paris',hour12:true}))

------------------------------------


Compare two dates - to get the days difference between 2 dates:
<script>
 const date1 = new Date('January 23, 2019 07:22:13')
 const date2 = new Date('January 21, 2019 07:22:13')

 //get the milli seconds difference between the above dates
 let diff = date1.getTime() - date2.getTime() 
 console.log(diff) 
 console.log("Days Difference = "+ diff/(1000*60*60*24));
</script>


check if two dates are equal:

const date1 = new Date('July 10, 2018 07:22:13')
const date2 = new Date('July 10, 2018 07:22:13')
if (date2.getTime() === date1.getTime()) {
  //dates are equal
}
--------------------------


Timing Events
-------------
(1) setTimeout(function, milliseconds) - executes a function, after waiting a specified number of milliseconds.

(2) setInterval(function, milliseconds) - same as setTimeout(), but repeats the execution of the function continuously.

Example:

<html>
<body>
 <button onclick="setTimeout(myFun, 3000);">Click Me  </button>

<script>
function myFun() 
{
 alert('Hello Java Script');
}
</script>
</body>
</html>



Example:2 - to display the time continuously after each second in the console
<html>
<body>
<script>
function myTimer() {
    let d = new Date();
    console.log(d.toLocaleTimeString());
}    
setInterval(myTimer, 1000);
</script>
</body>
</html>

The clearInterval() method stops the execution of the function specified in the setInterval() method.

<html>
<body>
<script>
let myVar = setInterval(myTimer, 1000);

function myTimer() {
    var d = new Date();
    console.log(d.toLocaleTimeString());
}    
</script>

<button onclick="clearInterval(myVar)">Stop Timer</button>    
</body>
</html>


