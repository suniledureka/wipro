Java Script DOM
===============
Document Object Model

Whenever browser gets an HTML document, before displaying the content on the browser, it reads the entire HTML document and prepares a tree like structure using all the HTML elements. This tree structure is called as DOM tree.

Each HTML element inside the DOM tree is called as DOM Node

Once this tree structure is built, then the browser renders each HTML element and display them on the browser as a web page

When a web page is loaded, the browser creates a Document Object Model of the page. 


JavaScript can access all the elements in a webpage making use of DOM and we can put our own content; so that Java Script provides the dynamic behaviour to the HTML page

By using JS we can do the following to the DOM Tree:
1) can add new HTML elements/ DOM Nodes and attributes
2) can change the existing DOM node content
3) can remove a DOM Node from the DOM Tree
4) can change the HTML attributes in the page
5) can change the CSS styles in the page
6) can react to all HTML events in the page
7) can create new HTML events in the page
etc


DOM Properties:
--------------
1) document.anchors - returns all <a> elements that have a "name" attribute

2) document.baseURI - returns the absolute base URI of the document

3) document.body - returns the <body> element 

4) document.cookie - returns the document's cookie

5) document.doctype - returns the document's doctype

6) document.documentElement - returns the <html> element 

7) document.domain - returns the domain name of the document server 

8) document.documentURI - returns the URI of the document 

9) document.forms - returns all <form> elements 	

10) document.head - returns the <head> element 	

11) document.images - returns all <img> elements 

12) document.lastModified - returns the date and time the document was updated

13) document.links - returns all <area> and <a> elements that have a "href" attribute

14) document.scripts - returns all <script> elements

15) document.title - returns the <title> element 

16) document.URL - returns the complete URL of the document 
etc



How to find HTML Elements
-------------------------
1) document.getElementById(id) - find an element by element id

2) document.getElementsByName(name) - find elements by name.

3) document.getElementsByTagName(html_tag_name) 

4) document.getElementsByClassName(css_class_name) 

5) document.querySelector(selector) - returns the first element that matches the specified selector (may be tag selector or class selector or id selector). 

6) document.querySelectorAll(selector) - return all the matches.

==========================================================

How to change HTML Elements?
---------------------------
1) elementRef.innerHTML = "new content"

to get content
 let data = elementRef.innerHTML

- is a property of HTMLElement Object 
- this property sets or returns the HTML content (inner HTML) of an element.
- it is used mostly in the web pages to generate the dynamic html content.


2) element.<attribute> = "new value" 
- change the attribute value of an HTML element
 <script>
  let img = document.getElementById('imgLogo');   
  img.src="../images/logo.png"
 </script>


3) element.style.property = "new style_value" 
- change the style of an HTML element


changing the attribute value by using setAttribute() method

- innerText Property 
--------------------
- property sets or returns the text content of the specified node, and all its descendants.

If you set the innerText property, any child nodes are removed and replaced by a single Text node containing the specified string.

It is used mostly in the web pages to generate the dynamic content such as writing the validation message, password strength etc.


8) textContent Property - returns the text content of all elements, while innerText returns the content of all elements, except for <script> and <style> elements.

- innerText will not return the text of elements that are hidden with CSS (textContent will).

======================================
Adding and Deleting Elements in DOM Tree
----------------------------------------
document.createElement(element) - create an HTML element

document.removeChild(element) - remove an HTML element

document.createTextNode(text_content)

document.appendChild(element) - add an HTML element

document.replaceChild(new, old) - replace an HTML element

document.write(text) - write into the HTML output stream

document.cloneNode() -- creates a copy of a node, and returns the clone.


Adding Events Handlers
----------------------
document.getElementById(id).onclick = function(){code}

-------------------------------
<ul id="list"></ul>
<button onclick="addTask()">Add Task</button>

const addTask = () => {
            const li = document.createElement("li");
            li.innerHTML = `<label>
                 <input type="checkbox">
                 <span>some data</span>
                </label>
                <span class="edit-btn">Edit</span>
                <span class="delete-btn">Delete</span>`;

            document.getElementById('list').appendChild(li);
        }   


=================================== ************************ =================================

Java Script Event Handling
==========================
Events are actions that happen to an HTML element and can be detected by JavaScript. 

Java Script can react to these events

Every element on a web page has certain events which can trigger JavaScript functions. 


Event Handlers:
---------------
1) onclick - occurs when element is clicked.

2) ondblclick - occurs when element is double-clicked.

3) onfocus - occurs when an element gets focus such as button, input, textarea etc.

4) onblur - occurs when form looses the focus from an element.

5) onsubmit - occurs when form is submitted.

6) onmouseover - occurs when mouse is moved over an element.

7) onmouseout - occurs when mouse is moved out from an element (after moved over).

8) onmousedown - occurs when mouse button is pressed over an element.

9) onmouseup - occurs when mouse is released from an element (after mouse is down).

10) onload - occurs when document, object or frameset is loaded.

11) onunload - occurs when body or frameset is unloaded.

12) onscroll - occurs when document is scrolled.

13) onresized - occurs when document is resized.

14) onreset - occurs when form is reset.

15) onkeydown - occurs when key is being pressed.

16) onkeypress - occurs when user presses the key.

17) onkeyup - occurs when key is released.
etc

JavaScript HTML DOM Event Listener
----------------------------------

1) addEventListener() -this method attaches an event handler to the specified element

2) removeEventListener()-this method to remove an event handler that has been attached with the addEventListener() method.


================================ ********************** ===================================

Browser Object Model
====================
BOM is used to interact with the browser.

The default object of browser is "window"

    window.alert("hello world");  
	is same as:
    alert("hello world");  

Child objects of window -> document , history , screen , navigator , location etc

1) window Object
----------------
- is a browser object

Methods of window object

1) alert()
2) confirm()
3) prompt()
4) open()	opens the new window.
5) close()	closes the current window.
6) setTimeout()	
etc

window.open() method
--------------------
 window.open(URL, name, specifications, replace)

Window Object Properties
------------------------
1) closed - returns a Boolean value indicating whether a window has been closed or not

2) document - returns the Document object for the window 

3) frameElement - returns the <iframe> element in which the current window is inserted

4) frames - returns all <iframe> elements in the current window

5) history - returns the History object for the window 

6) innerHeight 	

7) innerWidth 

8) length - returns the number of <iframe> elements in the current window

9) location - returns the Location object for the window 

name 	Sets or returns the name of a window

10) navigator - returns the Navigator object for the window
 
11) outerHeight - returns the outer height of a window, including toolbars & scrollbars

12) outerWidth 	- returns the outer width of a window, including toolbars & scrollbars

etc


JavaScript history Object
=========================
"history" object represents an array of URLs visited by the user. 

By using history - we can load previous, forward or any particular page.

   window.history  
	OR
   history  

Methods: 

1) forward() - loads the next page.
2) back() - loads the previous page.
3) go(number) - loads the given page number.

    history.go(2);//for next 2nd page  
    history.go(-2);//for previous 2nd page  


JavaScript Navigator Object
---------------------------
The JavaScript navigator object is used for browser detection. It can be used to get browser information.

   window.navigator  
	OR
    navigator  

"javaEnabled()" is the method of navigator used to check whether java is enabled.



JavaScript navigator object properties:
---------------------------------------
1) appName	returns the name

2) appVersion	returns the version

3) appCodeName	returns the code name

4) cookieEnabled	returns true if cookie is 		enabled otherwise false

5) userAgent	returns the user agent

6) language	returns the language. It is 		supported in Netscape and Firefox 	only.

7) userLanguage	returns the user language. 		It is supported in IE only.

8) plugins		returns the plugins. It is 		supported in Netscape and 		Firefox only.

9) systemLanguage	- returns the system language. It is supported in IE only.

10) mimeTypes[]	returns the array of mime type. It is supported in Netscape and Firefox only.

11) platform	returns the platform e.g. 			Win32.

12) online		returns true if browser is online otherwise false.

navigator.online
navigator.platform


JavaScript screen Object
------------------------
