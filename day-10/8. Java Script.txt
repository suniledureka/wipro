Object Oriented Programming
===========================
ES6, also known as ECMA Script-2015, introduced classes.

class is the blue print of an object

class contains properties and methods

A class is a type of function, but instead of using the keyword "function" to initiate it, we use the keyword "class", and the properties are assigned inside a constructor() method.

The class syntax has two components: (A) class expressions and (B) class declarations.


- creating an object in Function Orientated Programming
let mobile = {
  brand: 'Apple',
  price: 34500,
  color: 'Pink'
}

console.log(mobile);

class Mobile{
  constructor(brand, price, color){
    this.brand = brand
    this.price = price
    this.color = color
  }
}


Defining classes
----------------
1) Class declarations

One way to define a class is using a class declaration. To declare a class, you use the class keyword with the name of the class

class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }	
}

Hoisting

An important difference between function declarations and class declarations is that function declarations are hoisted and class declarations are not. You first need to declare your class and then access it

In JavaScript, hoisting refers to the built-in behavior of the language through which declarations of functions, variables, and classes are moved to the top of their scope â€“ all before code execution. In turn, this allows us to use functions, variables, and classes before they are declared.

const p = new Rectangle(); // ReferenceError
class Rectangle {}


2) Class expressions

A class expression is another way to define a class. Class expressions can be named or unnamed. The name given to a named class expression is local to the class's body. 

let Rectangle = class {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};
console.log(Rectangle.name);	// output: "Rectangle"

// named
let Rectangle = class Rectangle2 {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};
console.log(Rectangle.name);


Class body and method definitions
---------------------------------
The body of a class is the part that is in curly brackets {}. This is where you define class members, such as methods or constructor.

The constructor method is a special method for creating and initializing an object created with a class. There can only be one special method with the name "constructor" in a class.

A constructor can use the super keyword to call the constructor of the super class.

Prototype methods

class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
 
  // Method
  calcArea() {
    return this.height * this.width;
  }
}

const square = new Rectangle(10, 10);

console.log(square.calcArea()); // 100
------------------------------

You can use the underscore character to separate the getter/setter from the actual property

To avoid recursive call problem, make sure that the property being assigned to inside the setter function is different from the one that initially triggered the setter.The same goes for the getter.

    <script>
        class Mobile {            
            constructor(brand, price, color) {
                this._brand = brand
                this._price = price
                this._color = color
            }            
            get brand() {
                console.log('get brand')
                return this._brand;
            }
            set brand(brand) {
                console.log('set brand')
                this._brand = brand;
            }
        }

        let mob = new Mobile('Apple',25000,'Pink')
        console.log(mob.brand)
        mob.brand = 'Samsung'
        console.log(mob._brand)
    </script>

-------------------------
class Person {
    constructor(name,age,address){
        this._name = name;
        this._age = age;
        this._address = address;
    }

    get name() {
        return this._name;
    }

    set name(value) {
        this._name = value;
    }

    get age() {
        return this._age;
    }

    set age(value) {
        this._age = value;
    }

    get address() {
        return this._address;
    }

    set address(value) {
        this._address = value;
    }
}
let person = new Person('Sunil',40,'Hyderabad');
console.log(`Name : ${person.name}
             AGE : ${person.age}
             ADDRESS : ${person.address}`);


------------------------------

Static methods
--------------
The static keyword defines a static method for a class. 

Static methods are called without instantiating their class and cannot be called through a class instance. 
Static methods are often used to create utility functions for an application.

class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  static distance(a, b) {
    const dx = a.x - b.x;
    const dy = a.y - b.y;

    return Math.hypot(dx, dy);
  }
}
/*
The Math. hypot() -hypotenuse - function in JavaScript is used to calculate the square root of the sum of squares of numbers passed to it as arguments. It is basically used to find the hypotenuse of a right-angled triangle or the magnitude of a complex number.
*/

const p1 = new Point(5, 5);
const p2 = new Point(10, 10);

console.log(Point.distance(p1, p2)); // 7.0710678118654755


Instance properties
-------------------
Instance properties must be defined inside of class methods:

class Rectangle {
  constructor(height, width) {    
    this.height = height;
    this.width = width;
  }
}

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes

=======================================================

Inheritance 
Sub classing with extends
=========================
To create a class inheritance, use the "extends" keyword.

A class created with a class inheritance inherits all the properties & methods from another class


Person  
  firstName
  lastName

Employee extends Person
 constructor(...,...,.,,,){
   super(...,...)
 }


Customer extends Person{
   location
 }

==================================================

Modules
=======
Good authors divide their books into chapters and sections; good programmers divide their programs into modules.

keywords -> import & export


<persons> - person.js
  export class Person{}

<employees> - employee.js
  import {Person}  from '../persons/person.js'
  export class Employee extends Person{}
  
<customers> - customer.js
  export class Customer extends Person{}


app.js
import {Employee} from '../employees/employee.js'
let emp = new Employee(.....

index.html
<script type="module" src="app.js"></script>



import {Person} from "./persons/person.js"

import {Person} from '../persons/person.js'