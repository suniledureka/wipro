==== Node.js Modules ====

Modules are a fundamental concept in programming that allow code organization and encapsulation.

Modules help to break down large programs into smaller, manageable and reusable components or units.

Module is an encapsulated and reusable chunk of code that has its own context 

Modular approach enhances code organization, readability, and maintainability.

Modules contain functions, variables or classes. These components are encapsulated within the module to prevent external access 

Encapsulation ensures that the internal details of a module are hidden

In a payment module-  process payment, accept credit card, validate credit card, success message, failure all of this will contain in one single module that module becomes payment module 

Modular programming is an approach that separates a program into independent smaller modules - each module is responsible for a specific functionality.

--- Types of Modules ---

In Node.js each file is treated as a separate module 

In total we have 3 different types of modules 
  
  1. Built-in or Core modules - modules that Node ships. Modules that are part of the programming language or runtime environment 
Ex: 'fs' module (file system), 'http' module, 'path' module, 'url' module etc
 
  2. External or Third-party modules - modules created by other developers for specific functionalities that we can use in our application. We can install it using "npm" module manager

  3. Local modules/ Custom Modules / User-defined modules - modules that we create in our application   


CommonJS is a module specification used in Node.js.

CommonJS is a widely adopted module system in JavaScript, particularly for server-side development using Node.js. It provides a way to organize code into reusable modules, making it easier to manage dependencies and create larger, more complex projects. CommonJS uses "require()" to import modules and "module.exports" to export them. 

Modules are defined using "module.exports" and imported using "require()"

ES modules provide a standardized module system in JavaScript

Introduces in ES6 and supported in modern browsers

Use "import" and "export" statements for defining and importing modules



---- Create & Export Modules ----

1. Create a Module - modules can be created as separate files containing functions, variables, or classes

2. Exporting functions and variables - use "module.exports" to make functions or variables available outside the module

3. Exporting classes - modules can export classes for use in other parts of the application

4. Exporting multiple items - export multiple functions or variables from a single module

5. ES Modules (ECMAScript Modules) - ES Modules use "import" and "export" syntax for creating and exporting modules

6. Default Exports - Modules can have default export, simplifying import syntax


1. LOCAL MODULES

- Local modules are modules that we create and use in our application 

-- index.js --

console.log(`Hello from index.js`)
const add = (a=0, b=0) => {
  return a+b;
}
const sum = add(10, 20);
console.log(sum);

terminal> node index.js


Task: create a separate module for add() function

-- add.js ---

const add = (a=0, b=0) => {
  return a+b;
}
const sum = add(10, 20);
console.log(sum);

--- index.js ---
require('./add')
console.log(`Hello from index.js`)


terminal> node index

require() function loads the "add" module into index.js - we are basically asking V8 to execute the code in that module 


=== Debugging the Program

>> In Node.js each file is a module that is isolated by default
>> to load a module into another file - we use the require() function
>> when index.js is executed - the code in the module is also executed


==== Module Exports =====

The right way to create and reuse a block of code is to expose certain functionality that can be consumed by external files or apps  by using the special  "module.exports" object that is always readily available in Nodejs 

===== Importing Modules ======

Importing modules allows developers to use functionalities defined in other modules.

Importing entire modules --> In Node.js - require() function is used to import entire modules

Destructuring imports --> Destructuring allows importing specific functions or variables from a module

Using import syntax --> ES6 Modules uses the "import" keyword for importing functionality from other modules

Importing default exports --> When a module has a default export, it can be imported without curly braces

Aliasing Imports --> Aliasing allows renaming imported functions or variables

Importing Core Modules in Node.js --> Node.js provides core modules that can be imported directly



==== Module Scope ====

--- batman.js ---
const superHero = "Batman";
console.log(superHero);


--- superman.js ---
const superHero = "Superman";
console.log(superHero);

--- index.js ----
require('./batman')
require('.superman')

-- here both modules (batman & superman) have got its own scope.
-- the way Nodejs achieves this with the Immediately Invoked Function Expression (IIFE)  

IIFE are JavaScript functions that are executed immediately after they are defined


--- iife.js ---
(function () {
  const superHero = "Batman";
  console.log(superHero);
})("Hello");

(function () {
  const superHero = "Superman";
  console.log(superHero);
})("Hey");


terminal> node iife

with IIFE - each functions gets its own private scope; Nodejs also uses the same pattern

-- Before module's code is executed, Node.js will wrap it with a function wrapper. This saves us from having to worry about conflicting variables or functions. There is proper encapsulation and reusability is unaffected

-- Each loaded module in Node.js is wrapped with an IIFE that provides private scoping of code
-- IIFE allows you to repeat variable or function names without any conflicts





import {add, multiply} from './function-module'; 
import {Payment} from './classes-module.js' ////destructuring
	OR
const Payment = require('./classes-module') //require the module

 


==== Module Wrapper ====

Every module in Node.js gets wrapped in an IIFE before being loaded 

IIFE helps keep top level variables scoped to the module rather than the global object 

The IIFE that wraps every module contains five parameters which are pretty important for the functioning of a module 

Let's understand how parameters and arguments work with a simple IIFE in JavaScript 

--iife.js --- adding a parameter "message"

(function (message) {
  const superHero = "Batman";
  console.log(message, superHero);
})("Hello");

(function (message) {
  const superHero = "Superman";
  console.log(message, superHero);
})("Hey");

actual code 
(function(exports, require, module, __filename, __dirname){
  const superhero = "Batman";
  console.log(superhero);
})

by wrapping each module code in this IIFE with 5 parameters  - Node.js provides pure global looking variables that are actually specific to the module


what do these parameters represent - debug code
