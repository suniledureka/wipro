Node.js

Official Website : nodejs.org 

Node.js is a free, open-source, cross-platform, JavaScript runtime environment that lets developers create servers, web apps, command line tools and scripts

1. Node.js is open source - which means the source code of Node.js is publicly available for sharing and modification

2. Node.js is cross-platform - which means it is available for Mac, windows and Linux 

3. Node.js is a JavaScript runtime environment 

Runtime refers to the environment where a program is executed

Java Script Runtime is an environment which provides all the necessary components in order to use and run a Java Script program.

The runtime environment provides necessary resources and services for code execution

Java Script Engine is one component in the Java Script Runtime

Java Script Engine - is a program that executes JavaScript code 

Java Script Engines are typically developed by web browser vendors

 Firefox : Spider Monkey
 Chrome  : V8 Engine    v8.dev  (written in C++)
 IE      : Chakra

Chrome's V8 engine by Google sits at the core of Node.js


Node.js uses the V8 JavaScript Engine from Google Chrome to execute code

In the context of Node.js, it allows JavaScript to be executed outside of a web browser

JavaScript is traditionally associated with browser scripting but can now be used for server-side development using Node.js

Node.js was created by Ryan Dahl and was released in 2009

Node.js is built on the V8 Java Script runtime, and uses an event-driven, non-blocking I/O model

Node.js is single-threaded and asynchronous


Node.js enables building scalable network applications and handling concurrent connectivity efficiently


=== Why Node.js? ===

1. Node.js is a technology with which you can build end-to-end JavaScript applications - learn one language and you can develop both front-end and backend for your apps - build end-to-end Java Script applications. 

2. Number of major companies like LinkedIn, Netflix, PayPal have all migrated from other backend technologies to Node.js 

3. Full stack development is one of the most sought skill sets by companies - if you are a front-end developer- learning Node.js will take you one step closer to landing the dream job 

4. Huge Community Support 


==> What can you build with Node.js?

- making JavaScript programs to run outside browser

1. Traditional websites
2. Backend services like APIs
3. Real-time applications
4. Streaming services like Netflix
5. CLI tools
6. Multiplayer games
lot more

Source code of Node.js - https://github.com/nodejs/node (mainly 
- deps - external codes required to run Node.js - deps/v8 (chrome java script engine), 
- uv (libuv) - an open source library called libuv - libuv is a multi-platform support library with a focus on asynchronous I/O. It was primarily developed for use by Node.js,
etc


=== Environment Setup =====

1. Download & Install Node.js
https://nodejs.org/en    -- Download Node.js (LTS)   - node-v22.16.0-x64.msi
https://nodejs.org/en/download  - Windows Installer (.msi)   --- Node - 22.16.0

2. an editor - VSCode

cmd> node -v		 node --version
cmd> npm -v		 npm --version
cmd> npx -v              npx --version

NPM is a package management that is used to install, uninstall, and update Javascript packages on your workstation, whereas NPX is a package executer that is used to directly execute Javascript packages without installing them


=== Executing Java Script with Node === 
1. Node REPL   - Read Evaluate Print  Loop

reads Java Script code the user enters, evaluate the result of interpreting the line, prints the result to the user, loops until the user signals quit

cmd> node	--> starts an interactive shell that processes Node.js expressions




2. Executing code in a Java Script file in the command line - recommended

==== Browser Vs Node.js ====

Node.js executes JavaScript code outside the browser 

1. In the browser most of the time - what we are doing is interacting with the DOM or other web platform APIs like Cookies. 
In Node.js we don't have the document, window and all the other objects that are provided by the browser

2. In the browser we don't have all the nice APIs that Node.js provides through its modules.
For example the file system access functionality using "fs" module

3. With Node.js you control the environment - we know which version of Node.js the application runs on and that means we can write all the modern ES6/ ES7/ ES8 or ES9 JavaScript features that are Node.js version supports 


nvm - node version manager
"NVM" stands for "Node Version Manager," a tool used to manage different versions of Node.js on a developer's system
It allows developers to install, switch between, and manage multiple Node.js versions, which is helpful when working on projects that require specific versions of Node.js. 

$ nvm install 12
Now using node v12.22.6 (npm v6.14.5)

$ node -v
v12.22.6

$ nvm use 16
Now using node v16.9.1 (npm v7.21.1)

$ node -v
v16.9.1

$ nvm use 14
Now using node v14.18.0 (npm v6.14.15)

$ node -v
v14.18.0

