=== Built-in Modules ====

Node.js comes with a variety of built-in modules that provide core functionality and are integral to developing applications in Node.js

1. HTTP Modules:
 - enables the creation of HTTP Servers and clients
 - used for building web applications and services
 - supports features like request and response objects, handling GET and POST requests

2. File System (FS) Modules:
 - Provides functionality to interact with the file system
 - Capabilities including reading, writing, updating and deleting files
 - supports both synchronous and asynchronous methods

3. Path Module:
 - Useful for handling and transforming file paths
 - Provides utilities for working with directory and file paths, such as joining paths, getting file extensions

4. URL Modules:
 - For parsing and handling URLs
 - Useful for extracting different parts of a URL like hostname, path, query string etc

5. Events Module:
 - Allows for the creation and handling of custom events
 - The core of many Node.js event-driven applications
 - implements the Observer pattern

6. Util Module:
 - Provides utility functions for programming tasks
 - Includes functions for deprecating old functions, inspecting objects etc

7. Stream Module:
 - Offers a way to handle streaming data
 - Useful for large size data operations like file uploads / downloads
 - Includes readable, writable streams

8. Crypto Module:
 - Provides cryptographic functionality including a set of wrappers for OpenSSL's has, HMAC, ciper, sign, and verufy functions
 - Used for implementing security features like encrypting and decryption

9. Buffer Module:
 - Enabled working with binary data
 - Buffer acts like arrays of integers, but correspond to fixed, raw memory allocations outside the V8 heap

10. Child Process Module:
 - Allows for the execution of other applications in Node.js environment - applications running in the background
 - Can be used to create new processes, and manage communication between them

11. OS (Operating System) Module:
 - Provides information about the runtime environment's operating system
 - Useful for getting OS-specific information like memory usage, CPU details, platform etc

12. DNS Module:
 - For Network related applications
 - For performing DNS (Domain Name System) lookup ad to use underlying operating system name resolution functionalities
 - Includes functions like "resolve4()" for IP4 addresses, "resolveMx()" for mail exchange records etc

etc

=== 1. Built-in Module - HTTP =====

HTTP module allows Node.js to transfer data over the Hyper Text Transfer Protocol (HTTP)

To include the HTTP module, use the require() method:

const http = require('http');

The HTTP module can create an HTTP server that listens to server ports and gives a response back to the client.

Use the "createServer()"  method to create an HTTP server:

--- built-in-module-http.js ---
var http = require('http');
//create a server object:
http.createServer(function (req, res) {
  res.write('Hello World!'); //write a response to the client
  res.end(); //end the response
}).listen(8080); //the server object listens on port 8080 


const http = require('http')
const server = http.createServer((req, res) => {
    //set the response header
    res.writeHead(201, {"Content-Type":"text/html"});

    //send the end
    res.end("My first HTTP interaction");
});
const PORT = 3000
server.listen(PORT, () => {
    console.log('server running at port: ' + PORT)
})



=== 2. Built-in Module - File System (fs) =====

The Node.js file system module allows you to work with the file system on your computer.

To include the File System module, use the require() method
const fs = require('fs');

Common use for the File System module:
- Read files
- Create files
- Update files
- Delete files
- Rename files

fs.readFile() method is used to read files on your computer

--- example.txt --
Welcome to Node.js

-- built-in-module-fs.js --
const fs = require('fs');
fs.readFile('example.txt', 'utf-8', (err, data) => {
    if(err){
        console.log(err);
        return;
    }
    console.log("file contents = " + data)
})



myHomePage.html

<html>
<body>
<h1>My Header</h1>
<p>My paragraph.</p>
</body>
</html> 


var http = require('http');
var fs = require('fs');
http.createServer(function (req, res) {
  //Open a file on the server and return its content:
  fs.readFile('myHomePage.html', function(err, data) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080);

              
=== 3. Built-in Module - Path Module =====
The Path module provides a way of working with directories and file paths

var path = require('path');

https://www.w3schools.com/nodejs/ref_path.asp


=== 4. Built-in Module - URL Module =====
- used for parsing and handling URLs

The URL module splits up a web address into readable parts.

To include the URL module, use the require() method:
var url = require('url');


Parse an address with the url.parse() method, and it will return a URL object with each part of the address as properties


=== 4. Built-in Module - Events Module =====

https://www.youtube.com/watch?v=ACFnUhyWI0A&list=PLp50dWW_m40U38Imhi861whyA52YTB1GN&index=13


