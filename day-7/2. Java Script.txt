JavaScript Functions
--------------------
A function is a reusable code block; which will be executed by a call to the function. 

Functions are used for code reusability

A function is defined by using the keyword - "function"

Syntax:

 function <function_name>(parameters)
 {  
     //code to be executed  
 }  


Note: it is possible for us to provide the default value for the function parameters [New feature of ES6]


To declare a function use:-
 1) a function declaration or 
 2) a function expression
 3) arrow function - a new feature of ES6

2) Function Expressions
-----------------------
This is a feature of functional programming. 

Here we can assign the function itself as a value to a variable.

It is also called as First class Function.
JS contains many First Class Functions

Example:


    <script>
        let add = function(x = 0, y = 0) {
            let sum = x + y;
            if(isNaN(sum))
              console.log('please call method with sufficient data')
            else
                console.log(`${x} + ${y} = ${sum}`)
        }
    </script>

    <script>
        alert(typeof add)
        add(10, 20);
        add(1, 2, 3);
        add(23);
        add();
    </script>



Arrow Function
--------------
- new feature of ES-6 (ECMA Script --> European Computer Manufacturers Association)
- it is similar to lamda expression in Java

Example:
 <script>
        let add = (x = 0, y = 0) => {
            let sum = x + y;
            if(isNaN(sum))
              console.log('please call method with sufficient data')
            else
                console.log(`${x} + ${y} = ${sum}`)
        }
 </script>



Callback Function - 
-------------------
A JavaScript Callback Function is a function that is passed as a parameter to another JavaScript function, and the callback function is run inside of the function it was passed into.

let sum = (a , b) => {
    return a + b;
};

let mul = (a , b) => {
    return a * b;
};

let calculate = (a , b, calc) => {
    return calc(a , b);
};

console.log(calculate(10, 20, sum)); // 30
console.log(calculate(10, 20, mul)); // 200
console.log(calculate(10, 20, (a , b) => { return a - b}));



Variable Scopes |
Local Variables & Global Variables 
----------------------------------
Scope determines the accessibility or visibility of variables.

In JavaScript there are two types of scope:
1) Local Scope
2) Global Scope

Global variables are those declared outside of a function

Local variables are those declared inside of a block or function

A local variable is accessible within the function or block only; it becomes local to that.

Local variables are created when a function starts, and deleted when the function is completed.

A global variable has global scope- all scripts and functions on a web page can access it. 




Note: If you assign a value to a variable inside a function, that has not been declared, it will automatically become a GLOBAL variable.

function myFun(){
  let x = 11; //local variable
      y = 22; //global variable
}


Function parameters work as local variables inside functions.




JavaScript Dialog Boxes
-----------------------
JavaScript has three dialog boxes: 

1) Message Dialog or Alert Dialog
   alert("message")
- returns void

2) Confirmation Dialog
   confirm("message")
; this function return a boolean (true/false) value

3) Input Dialog
  prompt("message"[,"default text"])
- used to input some data and it returns a string or null


