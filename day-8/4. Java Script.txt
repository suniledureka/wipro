Arrays in Java Script
---------------------
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array

JavaScript array is an object that represents a collection of elements.

An array is a 0 index based collection of values

Neither the length of a JavaScript array nor the type of its elements are fixed. 

"length" property of an array is used for getting the size of an array

There are 3 ways to create array in JavaScript:

1) By array literal
Syntax:
let arrayname = [value1, value2, ...,valueN];  

---- array iteration using for...of loop ----
for(let mark of marks)
{
 console.log(mark)   
}


---- loop over an array using forEach ----
marks.forEach(function(mark, index) {
    console.log(mark, index)
})


2) JavaScript Array directly using "new" operator
Syntax:
 let arrayname = new Array();  


3) JavaScript array constructor

<script> 
let courses = new Array("Core Java","Adv Java","Hibernate", "Spring");  
</script>


Array Methods
-------------
1) reverse() - reverses the elements of given array.

2) indexOf(element) - searches the specified element in the given array and returns the index of the first match; it returs -1 if the searched element is not in array

3) lastIndexOf(element) - searches the specified element in the given array and returns the index of the last match; if not found -1

4) concat() - returns a new array object that contains two or more merged arrays or values.


5) push(...items) - adds item(s) to the end of array

6) pop() - extracts an item from the end of array (last element of array will be taken out)

7) shift() - extracts an item from the beginning of array

8) unshift(...items) - adds item(s) to the beginning of array

9) delete operator - used to delete an element

10) splice() - used to remove element(s) from an array from the specified index position
 splice(start index, n)

11) slice(start index[, end index]) - it returns a new array containing all items from index "start" to "end" (not including "end"). 

12) join() - joins all elements of an array into a string (default separator is ,)

13) sort() - sorts the elements of an array

14) toString() - converts an array to a string, and returns the result

15) fill() - fill the elements in an array with a value

17) find() - returns the value of the first element in an array that pass a test

18) filter()- creates a new array with every element in an array that pass a test

19) forEach() -calls a function for each array element

20) entries()- returns an array iterator Object with key/value pairs for each item in the array.

21) keys() - create an Array Iterator object, with keys for each item in the array

22) map() - creates a new array from calling a function for every array element - does not execute the function for empty elements - does not change the original array.
const numbers = [4, 9, 16, 25];
const newArr = numbers.map(Math.sqrt)

----------------------------- ************************----------------------------

Math Object
===========
- useful for performing various mathematical operations

Properties
----------
Math.E 		Returns Euler's number (approx. 2.718)

Math.PI 	Returns PI (approx. 3.14 (or) 22/7)


Math.LN2 	Returns the natural logarithm of 2 (approx. 0.693)

Math.LN10  	Returns the natural logarithm of 10 (approx. 2.302)

Math.LOG2E 	Returns the base-2 logarithm of E (approx. 1.442)

Math.LOG10E 	Returns the base-10 logarithm of E (approx. 0.434)

SQRT1_2 	Returns the square root of 1/2 (approx. 0.707)

Math.SQRT2 	Returns the square root of 2 (approx. 1.414)
etc

Methods
-------
Math.abs(x) 	Returns the absolute value of x  

Math.ceil(x) 	Returns the value, rounded upwards to the nearest integer  

Math.floor(x) 	Returns the value, rounded downwards to the nearest integer

Math.max(x,y,z,...,n) 	Returns the largest number in the list

Math.min(x,y,z,...,n) 	Returns the smallest number in the list

Math.pow(x,y) 	Returns the value of x to the power of y

Math.random() 	Returns a random number between 0 and 1

Math.round(x) 	Rounds x to the nearest integer   

Math.sqrt(x) 	Returns the square root of x

Math.exp(x) 	

Math.sin(x)

Math.cos(x) 
etc



JavaScript Number Object
------------------------
JavaScript has only one type of number.

Numbers can be written with, or without, decimals.

let x = 34.0;
ley y = 34;

Any number prefixed with 0 is treated as octal decimal, that with 0x is hexadecimal and with 0b is treated as a binary number


JavaScript Number Methods
--------------------------
1) toFixed() - returns a string, with the number written with a specified number of decimals:

let x = 9.656;
x.toFixed(0); // returns 10
x.toFixed(2); // returns 9.66
x.toFixed(4); // returns 9.6560
x.toFixed(6); // returns 9.656000 


2) parseInt() -parses a string and returns a whole  number. Spaces are allowed. Only the first number is returned:

parseInt("10");         // 10
parseInt("10.33");      // 10
parseInt("10 20 30");   // 10
parseInt("10 years");   // 10
parseInt("years 10");   // NaN  
parseInt("12A"); 	//12
parseInt("A12A"); 	//NaN

3) parseFloat()
parseFloat("10");       // 10
parseFloat("10.33");    // 10.33
parseFloat("10 20 30"); // 10
parseFloat("10 years"); // 10
parseFloat("years 10"); // NaN 


6) valueOf() - returns a number as a number.

var x = 123;
x.valueOf(); // returns 123 from variable x

(123).valueOf();   // returns 123 from literal 123

(100 + 23).valueOf();   // returns 123 from expression 100 + 23 



JavaScript Boolean
==================
JavaScript booleans can have one of two values: true or false.

You can use the Boolean() function to find out if an expression is true:

var x=Boolean(10 > 9)   
	OR
var x=10>9
alert(x+" - "+typeof(x));

O/P : true - boolean

toString() - converts a boolean value to a string, and returns the result

valueOf() - returns the primitive value of a boolean

var bool = true;
var x = bool.toString()
console.log(x);


var bool = false;
var x = bool.valueOf(); 
