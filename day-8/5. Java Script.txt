JavaScript String
=================

- a sequence of characters

- must be enclosed in single or double quotation marks. 
'Java Script'
"Java Script"

- 2 ways to create string in JavaScript
1) By string literal

let str="Java Script";  
console.log(str);  

2) By string object (using new keyword)

let str = new String("Java Script");  
console.log(str);  


Use back slash (\) to include quotation marks inside a string.
let data = 'Wipro\'s'
console.log(data); 

===========================
String literals are immutable, which means, once they are created, their state can't be changed, which also makes them thread safe.

let a = 's';
let b = 's';

a==b 

String Object:
--------------
Here, two different objects are created, and they have different references:

let a = new String("s");
let b = new String("s");
a==b 
	

typeof new String(); 
typeof '';           

In case of string literal we cannot assign properties

let x = "hello" ;
x.y = "world";
console.log(x.y); //undefined

whereas in case of String Object we can assign properties

let x = new String("hello");
x.y = "world";
console.log(x.y); //world

============================
Properties:
-----------
1) length 


methods
-------
1) charAt(number index) - provides the char value present at the specified index.

2) concat(elements) - provides a combination of two or more strings.

3) indexOf(string) - provides the position of a string value present in the given string.

4) lastIndexOf(string) - provides the position of a string value present in the given string by searching it from the last position.

5) search(regexp/string) - searches a specified regular expression or a string in a given string and returns its position if a match occurs.

6) replace(old str, new str) - replaces a given string with the specified replacement.

7) substr(start index, length) - used to fetch the part of the given string on the basis of the specified starting position and length.

8) substring(start index , end index) - used to fetch the part of the given string on the basis of the specified index.

9) slice(start index, end index) - used to fetch the part of the given string

10) toLowerCase()

11) toUpperCase()

12) trim() - function used to remove the leading and ending spaces

13) valueOf() - provides the primitive value of string object.

14) split(separator): Splits a string into an array of substrings based on a separator.

15) startsWith(substring): Checks if a string starts with a specified substring.

16) endsWith(substring): Checks if a string ends with a specified substring.

etc


---------------------------------------- ********************** -------------------------------------

Spread & Rest Operators
-----------------------

The Spread Operator is used to 'spread' an iterable into its elements, while the Rest Operator 'collects' multiple elements into an array. 

...data

JavaScript uses three dots (...) for both the rest and spread operators.

The main difference between rest and spread is that the rest operator puts the rest of some specific user-supplied values into a JavaScript array. But the spread syntax expands iterables into individual elements.


Example - Rest operator

function myBiodata(firstName, lastName, ...otherInfo) { 
  return otherInfo;
}

// Invoke myBio function while passing five arguments to its parameters:
console.log(myBiodata("Sunil", "Joseph", "Java Full-stack Dev", "Web Developer", "Male"));

// The invocation above will return: ["Java Full-stack Dev", "Web Developer", "Male"]


Example - Spread Operator

   <script>
        function myBiodata(firstName, lastName, company) { 
            return `${firstName} ${lastName} runs ${company}`;
        }

        let myDetails = ['Sunil', 'Joseph', 'example.com'];

        //console.log(myBiodata(myDetails));
        console.log(myBiodata(...myDetails));
    </script>

